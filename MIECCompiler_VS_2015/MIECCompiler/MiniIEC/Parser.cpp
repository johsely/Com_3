/**
* @file   Parser.cpp
* @Author Christoph Haslinger, Johannes Selymes
* @Date   Februar , 2016
* @brief  Autogenerated Parser Implementation
*
*
*/

#include <wchar.h>
#include "Parser.h"
#include "Scanner.h"


namespace MIEC {


void Parser::SynErr(int n) {
	if (errDist >= minErrDist) errors->SynErr(la->line, la->col, n);
	errDist = 0;
}

void Parser::SemErr(const wchar_t* msg) {
	if (errDist >= minErrDist) errors->Error(t->line, t->col, msg);
	errDist = 0;
}

void Parser::Get() {
	for (;;) {
		t = la;
		la = scanner->Scan();
		if (la->kind <= maxT) { ++errDist; break; }

		if (dummyToken != t) {
			dummyToken->kind = t->kind;
			dummyToken->pos = t->pos;
			dummyToken->col = t->col;
			dummyToken->line = t->line;
			dummyToken->next = NULL;
			coco_string_delete(dummyToken->val);
			dummyToken->val = coco_string_create(t->val);
			t = dummyToken;
		}
		la = t;
	}
}

void Parser::Expect(int n) {
	if (la->kind==n) Get(); else { SynErr(n); }
}

void Parser::ExpectWeak(int n, int follow) {
	if (la->kind == n) Get();
	else {
		SynErr(n);
		while (!StartOf(follow)) Get();
	}
}

bool Parser::WeakSeparator(int n, int syFol, int repFol) {
	if (la->kind == n) {Get(); return true;}
	else if (StartOf(repFol)) {return false;}
	else {
		SynErr(n);
		while (!(StartOf(syFol) || StartOf(repFol) || StartOf(0))) {
			Get();
		}
		return StartOf(syFol);
	}
}

void Parser::Ident(std::string &name) {
		Expect(1);
		wchar_t* wCharStr = coco_string_create(t->val);
		std::wstring wStr = std::wstring(wCharStr);  
		coco_string_delete(wCharStr); // avoid memleak
		name = std::string(wStr.begin(), wStr.end()); 
}

void Parser::Number(IDACEntry* &dacEntry) {
		Expect(2);
		Symbol* symbol = reinterpret_cast<Symbol*>(dacEntry);
		wchar_t* wCharStr = coco_string_create(t->val);
		std::wstring wStr = std::wstring(wCharStr);  
		coco_string_delete(wCharStr); // avoid memleak
		std::string name = std::string(wStr.begin(), wStr.end());
			
		// try to find constant in table
		std::string tmpStr(name); 
		tmpStr.insert(0, "const"); // this because of naming	
		symbol = SymbolTable::GetInstance()->Find(tmpStr);
		if (symbol == 0) {
			int value = std::stoi(name); 
			symbol = SymbolFactory::GetInstance()->CreateConstIntSymbol(value);	
			SymbolTable::GetInstance()->AddSymbol(symbol);
		}	
		dacEntry = symbol;
		
}

void Parser::MIEC() {
		Expect(3);
		Expect(1);
		SymbolFactory symbolFactory; 		
		
		if (la->kind == 6) {
			VarDecl();
		}
		Expect(4);
		IDACEntry* dummy; 
		Statements(dummy);
		Expect(5);
		DACGenerator::GetInstance()->AddStatement(eExit, 0, 0); 
}

void Parser::VarDecl() {
		std::string name; size_t offset = 0; 
		auto constInt0 = SymbolFactory::GetInstance()->CreateConstIntSymbol(0);
		SymbolTable::GetInstance()->AddSymbol(constInt0);	  /* add constant 0 to initialize Integers*/ 
		Expect(6);
		Ident(name);
		Expect(7);
		Expect(8);
		Expect(9);
		auto symbol = SymbolFactory::GetInstance()->CreateIntegerVariable(offset, name);
		if (!SymbolTable::GetInstance()->AddSymbol(symbol)) {
			std::cout << std::string("variable " + name + " already declared") << " Line: " << t->line << " Column: " << t->col << std::endl;
			delete symbol;
		}
		else {
			auto constNull = SymbolTable::GetInstance()->Find("const0");
			DACGenerator::GetInstance()->AddStatement(eAssign, symbol , constNull);
		}
		
		while (la->kind == 1) {
			Ident(name);
			Expect(7);
			Expect(8);
			Expect(9);
			auto symbol = SymbolFactory::GetInstance()->CreateIntegerVariable(offset, name);
			if(!SymbolTable::GetInstance()->AddSymbol(symbol)) {
				std::cout << std::string("variable " + name + " already declared") << " Line: " << t->line << " Column: " << t->col << std::endl;
				delete symbol;
			}
			
		}
		Expect(10);
}

void Parser::Statements(IDACEntry* &retIDACEntry) {
		IDACEntry* dummy; 
		Stat(retIDACEntry);
		while (StartOf(1)) {
			Stat(dummy);
		}
}

void Parser::Stat(IDACEntry* &retIDACEntry) {
		std::string name; IDACEntry* result; IDACEntry* condResult; IDACEntry* startElse; IDACEntry* dummy;  
		if (la->kind == 1) {
			Ident(name);
			Expect(11);
			Expr(result);
			Expect(9);
			auto symbol = SymbolTable::GetInstance()->Find(name);					 
			if (symbol == 0) {std::cout << std::string("variable " + name + " not declared") << " Line: " << t->line << " Column: " << t->col << std::endl;} 
			retIDACEntry = DACGenerator::GetInstance()->AddStatement(eAssign, symbol, result);
			
		} else if (la->kind == 12) {
			Get();
			Expr(result);
			Expect(13);
			Expect(9);
			retIDACEntry = DACGenerator::GetInstance()->AddStatement(ePrint, result); 
		} else if (la->kind == 14) {
			Get();
			Condition(condResult);
			Expect(15);
			retIDACEntry = DACGenerator::GetInstance()->AddStatement(eIfFalseJump, condResult, 0); 
			Statements(dummy);
			DACGenerator::GetInstance()->AddStatement(eJump, condResult, 0); 
			Expect(5);
			((DACEntry*)retIDACEntry)->ChangeArg2(DACGenerator::GetInstance()->GetNext()); 
		} else if (la->kind == 16) {
			Get();
			Condition(condResult);
			retIDACEntry = DACGenerator::GetInstance()->AddStatement(eIfFalseJump, condResult, 0); 
			Expect(17);
			Statements(dummy);
			if (la->kind == 5) {
				Get();
				((DACEntry*)retIDACEntry)->ChangeArg2(DACGenerator::GetInstance()->GetNext()); 
			} else if (la->kind == 18) {
				Get();
				DACEntry* jmpStatement = (DACEntry*)DACGenerator::GetInstance()->AddStatement(eJump, 0, 0); /* we dont know where to jump yet, -> to statement after end*/ 
				Statements(startElse);
				Expect(5);
				((DACEntry*)retIDACEntry)->ChangeArg2(startElse); jmpStatement->ChangeArg1(DACGenerator::GetInstance()->GetNext()); 
			} else SynErr(31);
		} else SynErr(32);
}

void Parser::Expr(IDACEntry* &result) {
		IDACEntry* tmpDACEntry1 = 0; IDACEntry* tmpDACEntry2 = 0; OpKind opKind; 
		Term(tmpDACEntry1);
		while (la->kind == 19 || la->kind == 20) {
			if (la->kind == 19) {
				Get();
				opKind = eAdd; 
			} else {
				Get();
				opKind = eSubtract; 
			}
			Term(tmpDACEntry2);
			tmpDACEntry1 = DACGenerator::GetInstance()->AddStatement(opKind, tmpDACEntry1, tmpDACEntry2); 
		}
		result = tmpDACEntry1; 
}

void Parser::Condition(IDACEntry* &result) {
		IDACEntry* dacEntry1 = 0; IDACEntry* dacEntry2 = 0; OpKind opKind; 
		Expr(dacEntry1);
		Relop(opKind);
		Expr(dacEntry2);
		result = DACGenerator::GetInstance()->AddStatement(opKind, dacEntry1, dacEntry2); 
}

void Parser::Term(IDACEntry* &result) {
		IDACEntry* tmpDACEntry1 = 0; IDACEntry* tmpDACEntry2 = 0; OpKind opKind; 
		Fact(tmpDACEntry1);
		
		while (la->kind == 21 || la->kind == 22) {
			if (la->kind == 21) {
				Get();
				opKind = eMultiply; 
			} else {
				Get();
				opKind = eDivide; 
			}
			Fact(tmpDACEntry2);
			tmpDACEntry1 = DACGenerator::GetInstance()->AddStatement(opKind, tmpDACEntry1, tmpDACEntry2); 
		}
		result = tmpDACEntry1; 
}

void Parser::Fact(IDACEntry* &result) {
		std::string name; 
		if (la->kind == 1) {
			Ident(name);
			result = SymbolTable::GetInstance()->Find(name); 
			if (result == 0) {
				std::cout << std::string("variable " + name + " not declared") << " Line: " << t->line << " Column: " << t->col << std::endl;
			} 	
			
		} else if (la->kind == 2) {
			Number(result);
		} else if (la->kind == 23) {
			Get();
			Expr(result);
			Expect(13);
		} else SynErr(33);
}

void Parser::Relop(OpKind & opKind) {
		switch (la->kind) {
		case 24: {
			Get();
			opKind = eIsEqual; 
			break;
		}
		case 25: {
			Get();
			opKind = eIsNotEqual; 
			break;
		}
		case 26: {
			Get();
			opKind = eIsLess; 
			break;
		}
		case 27: {
			Get();
			opKind = eIsGreater; 
			break;
		}
		case 28: {
			Get();
			opKind = eIsLessEqual; 
			break;
		}
		case 29: {
			Get();
			opKind = eIsGreaterEqual; 
			break;
		}
		default: SynErr(34); break;
		}
}



void Parser::Parse() {
	t = NULL;
	la = dummyToken = new Token();
	la->val = coco_string_create(L"Dummy Token");
	Get();
	MIEC();

	Expect(0);
}

Parser::Parser(Scanner *scanner) {
	maxT = 30;

	dummyToken = NULL;
	t = la = NULL;
	minErrDist = 2;
	errDist = minErrDist;
	this->scanner = scanner;
	errors = new Errors();
}

bool Parser::StartOf(int s) {
	const bool T = true;
	const bool x = false;

	static bool set[2][32] = {
		{T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x},
		{x,T,x,x, x,x,x,x, x,x,x,x, T,x,T,x, T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x}
	};



	return set[s][la->kind];
}

Parser::~Parser() {
	delete errors;
	delete dummyToken;
}

Errors::Errors() {
	count = 0;
}

void Errors::SynErr(int line, int col, int n) {
	wchar_t* s;
	switch (n) {
			case 0: s = coco_string_create(L"EOF expected"); break;
			case 1: s = coco_string_create(L"ident expected"); break;
			case 2: s = coco_string_create(L"number expected"); break;
			case 3: s = coco_string_create(L"\"PROGRAM\" expected"); break;
			case 4: s = coco_string_create(L"\"BEGIN\" expected"); break;
			case 5: s = coco_string_create(L"\"END\" expected"); break;
			case 6: s = coco_string_create(L"\"BEGIN_VAR\" expected"); break;
			case 7: s = coco_string_create(L"\":\" expected"); break;
			case 8: s = coco_string_create(L"\"Integer\" expected"); break;
			case 9: s = coco_string_create(L"\";\" expected"); break;
			case 10: s = coco_string_create(L"\"END_VAR\" expected"); break;
			case 11: s = coco_string_create(L"\":=\" expected"); break;
			case 12: s = coco_string_create(L"\"print(\" expected"); break;
			case 13: s = coco_string_create(L"\")\" expected"); break;
			case 14: s = coco_string_create(L"\"WHILE\" expected"); break;
			case 15: s = coco_string_create(L"\"DO\" expected"); break;
			case 16: s = coco_string_create(L"\"IF\" expected"); break;
			case 17: s = coco_string_create(L"\"THEN\" expected"); break;
			case 18: s = coco_string_create(L"\"ELSE\" expected"); break;
			case 19: s = coco_string_create(L"\"+\" expected"); break;
			case 20: s = coco_string_create(L"\"-\" expected"); break;
			case 21: s = coco_string_create(L"\"*\" expected"); break;
			case 22: s = coco_string_create(L"\"/\" expected"); break;
			case 23: s = coco_string_create(L"\"(\" expected"); break;
			case 24: s = coco_string_create(L"\"=\" expected"); break;
			case 25: s = coco_string_create(L"\"!=\" expected"); break;
			case 26: s = coco_string_create(L"\"<\" expected"); break;
			case 27: s = coco_string_create(L"\">\" expected"); break;
			case 28: s = coco_string_create(L"\"<=\" expected"); break;
			case 29: s = coco_string_create(L"\">=\" expected"); break;
			case 30: s = coco_string_create(L"??? expected"); break;
			case 31: s = coco_string_create(L"invalid Stat"); break;
			case 32: s = coco_string_create(L"invalid Stat"); break;
			case 33: s = coco_string_create(L"invalid Fact"); break;
			case 34: s = coco_string_create(L"invalid Relop"); break;

		default:
		{
			wchar_t format[20];
			coco_swprintf(format, 20, L"error %d", n);
			s = coco_string_create(format);
		}
		break;
	}
	wprintf(L"-- line %d col %d: %ls\n", line, col, s);
	coco_string_delete(s);
	count++;
}

void Errors::Error(int line, int col, const wchar_t *s) {
	wprintf(L"-- line %d col %d: %ls\n", line, col, s);
	count++;
}

void Errors::Warning(int line, int col, const wchar_t *s) {
	wprintf(L"-- line %d col %d: %ls\n", line, col, s);
}

void Errors::Warning(const wchar_t *s) {
	wprintf(L"%ls\n", s);
}

void Errors::Exception(const wchar_t* s) {
	wprintf(L"%ls", s); 
	exit(1);
}

} // namespace


